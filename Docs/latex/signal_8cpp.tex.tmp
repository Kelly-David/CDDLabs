\hypertarget{signal_8cpp}{}\section{signal.\+cpp File Reference}
\label{signal_8cpp}\index{signal.\+cpp@{signal.\+cpp}}


A Documented file.  


{\ttfamily \#include \char`\"{}Semaphore.\+h\char`\"{}}\\*
{\ttfamily \#include $<$iostream$>$}\\*
{\ttfamily \#include $<$thread$>$}\\*
Include dependency graph for signal.\+cpp\+:
% FIG 0
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
void \hyperlink{signal_8cpp_a2696073bbedb6b55e6a52d2180c2a9b3}{task\+One} (std\+::shared\+\_\+ptr$<$ \hyperlink{classSemaphore}{Semaphore} $>$ the\+Semaphore)
\begin{DoxyCompactList}\small\item\em This function will be called from a thread. \end{DoxyCompactList}\item 
void \hyperlink{signal_8cpp_ae4ea9570be601d182fa473c7ca431852}{task\+Two} (std\+::shared\+\_\+ptr$<$ \hyperlink{classSemaphore}{Semaphore} $>$ the\+Semaphore)
\begin{DoxyCompactList}\small\item\em This function will be called from a thread. \end{DoxyCompactList}\item 
int \hyperlink{signal_8cpp_a840291bc02cba5474a4cb46a9b9566fe}{main} (void)
\begin{DoxyCompactList}\small\item\em The eponymous main function. \end{DoxyCompactList}\end{DoxyCompactItemize}


\subsection{Detailed Description}
A Documented file. 



\subsection{Function Documentation}
\index{signal.\+cpp@{signal.\+cpp}!main@{main}}
\index{main@{main}!signal.\+cpp@{signal.\+cpp}}
\subsubsection[{\texorpdfstring{main(void)}{main(void)}}]{\setlength{\rightskip}{0pt plus 5cm}int main (
\begin{DoxyParamCaption}
\item[{void}]{}
\end{DoxyParamCaption}
)}\hypertarget{signal_8cpp_a840291bc02cba5474a4cb46a9b9566fe}{}\label{signal_8cpp_a840291bc02cba5474a4cb46a9b9566fe}


The eponymous main function. 

Forks two threads and a shared semaphore Assigns a task to each thread Then joins both threads with the main thread $<$ Launch the threads \index{signal.\+cpp@{signal.\+cpp}!task\+One@{task\+One}}
\index{task\+One@{task\+One}!signal.\+cpp@{signal.\+cpp}}
\subsubsection[{\texorpdfstring{task\+One(std\+::shared\+\_\+ptr$<$ Semaphore $>$ the\+Semaphore)}{taskOne(std::shared_ptr< Semaphore > theSemaphore)}}]{\setlength{\rightskip}{0pt plus 5cm}void task\+One (
\begin{DoxyParamCaption}
\item[{std\+::shared\+\_\+ptr$<$ {\bf Semaphore} $>$}]{the\+Semaphore}
\end{DoxyParamCaption}
)}\hypertarget{signal_8cpp_a2696073bbedb6b55e6a52d2180c2a9b3}{}\label{signal_8cpp_a2696073bbedb6b55e6a52d2180c2a9b3}


This function will be called from a thread. 


\begin{DoxyParams}{Parameters}
{\em the\+Semaphore} & the the shared semaphore object\\
\hline
\end{DoxyParams}
The function prints to the screen the\+Semaphore calls signal() \index{signal.\+cpp@{signal.\+cpp}!task\+Two@{task\+Two}}
\index{task\+Two@{task\+Two}!signal.\+cpp@{signal.\+cpp}}
\subsubsection[{\texorpdfstring{task\+Two(std\+::shared\+\_\+ptr$<$ Semaphore $>$ the\+Semaphore)}{taskTwo(std::shared_ptr< Semaphore > theSemaphore)}}]{\setlength{\rightskip}{0pt plus 5cm}void task\+Two (
\begin{DoxyParamCaption}
\item[{std\+::shared\+\_\+ptr$<$ {\bf Semaphore} $>$}]{the\+Semaphore}
\end{DoxyParamCaption}
)}\hypertarget{signal_8cpp_ae4ea9570be601d182fa473c7ca431852}{}\label{signal_8cpp_ae4ea9570be601d182fa473c7ca431852}


This function will be called from a thread. 


\begin{DoxyParams}{Parameters}
{\em the\+Semaphore} & the the shared semaphore object\\
\hline
\end{DoxyParams}
the\+Semaphore calls wait() The function prints to the screen 